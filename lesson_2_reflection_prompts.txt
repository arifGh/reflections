# What happens when you initialize a repository? Why do you need to do it?
# 初始化版本库时会发生什么情况？为什么你需要这样做？
 创建此文件后，你可能还要运行 git status。此时，你应看到这两个文件均列出为未被跟踪的文件。
	提示消息-初始化一个空的 git 存储库；为了方便管理项目，追踪文件

# How is the staging area different from the working directory and the repository?
# What value do you think it offers?
# 暂存区与工作目录和版本库有何不同？你认为它具有什么价值？
	暂存区的文件会被追踪，版本库已保存就不能恢复到以前版本

# How can you use the staging area to make sure you have one commit per logical change?
# 如何使用暂存区确保为每项逻辑更改进行一次提交？
	git diff --staged

# What are some situations when branches would be helpful in keeping your history organized? How would branches help?
# 在哪些情况下，分支可以帮助你有序地组织历史记录？分支将如何提供帮助？
	需要添加实验性功能，或添加其他语言功能
	分支提供很好的一个实验空间，但不影响主线路，保持项目的条理性。

# How do the diagrams help you visualize the branch structure?
# 图表如何帮助你直观显示分支结构？
	git log --graph --oneline  branch_name1 branch_name2
	各分支 commit 易于阅读

# What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
# 将两个分支合并到一起有何结果？为什么我们在图表中表示它的方式是那样的？
	将两个分支合并到一起，会把这两个分支合并到checkout的分支，git log 显示两个分支的所有 commit，但显示方式是按提交时间排序

# What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
# Git 的自动合并与始终手动进行合并各有何优缺点？
	自动合并简单，快速。但不能判定保存同一个地方的修改
	手动提交不够简单，但能手动判断该保留哪一个修改
